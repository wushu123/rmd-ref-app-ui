# Inspired by https://github.com/cloudfoundry-community/nginx-buildpack
worker_processes 1;
daemon off;

env VCAP_SERVICES;

error_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/error.log debug;
events { worker_connections 1024; }

http
{
    log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
    log_format upstreamlog 'PROXYING $remote_addr - $server_name  to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

    access_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/access.log cloudfoundry;

    # Define the MIME types for files.
    include       mime.types;
    sendfile on;

    include gzip.types;
    etag on;
    tcp_nopush on;
    keepalive_timeout 30;

    default_type  application/octet-stream;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;

    # Security settings described here:
    # https://gist.github.com/plentz/6737338

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
    # WARNING: including the "data:" directive in the script-src policy is dangerous!! I had to allow this for now, to make Firefox & Safari work.  Should be removed in the future.
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' data: https://www.google-analytics.com; img-src 'self' data: https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://themes.googleusercontent.com; object-src 'none'; connect-src 'self' <%= ENV["LIVE_DATA_WS_URL"] %>";

    # enabling Public Key Pinning Extension for HTTP (HPKP)
    # https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning
    # to generate use on of these:
    # $ openssl rsa -in my-website.key -outform der -pubout | openssl dgst -sha256 -binary | base64
    # $ openssl req -in my-website.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    # $ openssl x509 -in my-website.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
    # add_header Public-Key-Pins 'pin-sha256="base64+info1="; max-age=31536000; includeSubDomains';

    server
    {
        set     $session_name                       "rmd_refapp_session";
        set     $session_secret                     U2GoXJPsG4jYx2G3Bn0k99Fle0+yNSqt7D92po40RvU=;
        set     $session_cookie_secure              on;
        set     $client_id                          app_client_id;
        # set     $uaa_authorization_header           "Basic bXZwM19yZWZfYXBwOm12cDNyZWZAcHA=";
        set     $uaa_authorization_header           "Basic <%= ENV["predix_oauth_clientId"] %>";
        set     $user_token                         '';

        # added logging for debugging proxy issues:
        rewrite_log on;

        listen <%= ENV["PORT"] %>;
        server_name localhost;

        #Open File cache
        open_file_cache          max=2000 inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;

        root <%= ENV["APP_ROOT"] %>/public/www;

        #nginx_status
        location /nginx_status {
            stub_status   on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }

        # Don't allow any access to hidden files
        location ~ /\. { deny  all; }

        location = /getWsUrl
        {
            # can't stop caching here... so you need to send in a cache-busting query string.
            default_type 'application/json';
            return 200 '{"wsUrl": "<%= ENV["LIVE_DATA_WS_URL"]%>"}';
        }

        location ~* \.\w+$ {
            try_files $uri $uri/ 404;
            expires 1d;
        }

        ## Login Routes
        location /login {
            access_by_lua '
            local state = "/about"
            if ngx.req.get_uri_args()["state"] ~= nil then
                state = ngx.req.get_uri_args()["state"]
            end
            local authorization_url = "<%=ENV["UAA_SERVER_URL"]%>/oauth/authorize?response_type=code&client_id="..ngx.var.client_id.."&redirect_uri=https%3A%2F%2F"..ngx.var.host.."%2Fcallback&state="..state
            return ngx.redirect(authorization_url)
            ';
        }

        location /callback {
            rewrite_by_lua_file <%= ENV["APP_ROOT"] %>/get_access_token.lua;
        }

        # Internal access token
        location /_internal/_access_token
        {
            # for some reason, this doens't write to the log...
            access_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/access.log upstreamlog;
            proxy_set_header    Content-Type    application/x-www-form-urlencoded;
            proxy_set_header    Authorization   $uaa_authorization_header;
            proxy_pass          <%= ENV["UAA_SERVER_URL"] %>/oauth/token;
        }

        location /logout
        {
            access_by_lua '
                local common = require("common");
                common.remove_session()
                local logout_server_url = "<%= ENV["UAA_SERVER_URL"] %>/logout?redirect=https://"..ngx.var.host
                return ngx.redirect(logout_server_url)
            ';
        }

        ## User Routes
        location /userinfo
        {
            add_header Cache-Control "private";
            expires off;

            default_type 'application/json';
            content_by_lua '
                local common = require("common");
                ngx.say(common.get_current_user_info())
            ';
        }

        # Internal url to get user information
        location /_internal/_userinfo
        {
            proxy_set_header    Content-Type    application/x-www-form-urlencoded;
            proxy_set_header    Authorization   $uaa_authorization_header;
            proxy_pass          <%= ENV["UAA_SERVER_URL"] %>/check_token;
        }

        # Any Api Call made should have bearer token set using set_access_token.lua file
        location /api{
            access_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/access.log upstreamlog;

            access_by_lua_file <%= ENV["APP_ROOT"] %>/set_access_token.lua;

            # Refer https://github.com/predixdev/predix-seed/wiki/Reading-VCAP_SERVICES-in-client-side-or-nginx-for-proxying for details on another way to read environment variables.

            location /api/asset
            {
                proxy_set_header    Authorization   $user_token;
                #proxy_set_header    predix-zone-id  "446a256f-8a3e-4c2b-aac9-e217c2b4f2d6";
                proxy_set_header    predix-zone-id   "<%= ENV["assetZoneId"] %>";
                rewrite             /api/(.*) /$1 break;
                proxy_pass  "<%= ENV["assetUrl"] %>";
            }

            location /api/group
            {
                proxy_set_header    Authorization   $user_token;
                proxy_set_header    predix-zone-id   "<%= ENV["assetZoneId"] %>";
                rewrite             /api/(.*) /$1 break;
                proxy_pass  "<%= ENV["assetUrl"] %>";
            }

            location /api/v1/datapoints
            {
                proxy_set_header    Authorization   $user_token;
		rewrite		/api/v1/datapoints	/v1/datapoints break;
                # need to use redirect to pass along POST data
                proxy_set_header    predix-zone-id  "<%= ENV["timeSeriesZoneId"] %>";
                proxy_redirect      "<%= ENV["timeSeriesUrl"] %>/v1/datapoints"   /v1/datapoints;
                proxy_pass          "<%= ENV["timeSeriesUrl"] %>/v1/datapoints";
            }

            location /api/datagrid
            {
                proxy_set_header    Authorization   $user_token;
                rewrite         /api/datagrid/(.*) /services/experience/datasource/datagrid/$1 break;
                proxy_pass "<%= ENV["RMD_DATASOURCE_URL"] %>";
            }

        }


        location / {
            # For HTML5 Support, Serve index.html for any other endpoint
            index index.html index.htm Default.htm;
            try_files $uri $uri/ /index.html;

            <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
            autoindex on;
            <% end %>
        }


    }
}
